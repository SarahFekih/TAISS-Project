// Generated by antelope-abi2rs 0.4.1 - eosio::abi/1.2

use serde::{Deserialize, Deserializer, Serialize};

type Uint64 = u64;
type Float32 = String;

fn str_or_u64<'de, D>(deserializer: D) -> Result<u64, D::Error>
where
    D: Deserializer<'de>,
{
    #[derive(Deserialize)]
    #[serde(untagged)]
    enum StrOrU64<'a> {
        Str(&'a str),
        U64(u64),
    }

    Ok(match StrOrU64::deserialize(deserializer)? {
        StrOrU64::Str(v) => v
            .parse::<u64>()
            .map_err(|_| serde::de::Error::custom("failed to parse u64 number"))?,
        StrOrU64::U64(v) => v,
    })
}

macro_rules! impl_try_from_str {
    ($type:ty) => {
        impl TryFrom<&str> for $type {
            type Error = serde_json::Error;
            #[inline]
            fn try_from(str: &str) -> Result<Self, Self::Error> {
                serde_json::from_str(str)
            }
        }
    };
}

#[derive(Serialize, Deserialize, Debug, PartialEq, Eq)]
#[serde(deny_unknown_fields)]
pub struct Setentry {
    pub transmitterSig: String,
    pub receiverSignature: String,
    #[serde(deserialize_with = "str_or_u64")]
    pub timestamp: Uint64,
    pub temperature: Float32,
    pub humidity: Float32,
    pub ammoniaConcentration: Float32,
    pub dissolvedOxygen: Float32,
}
impl_try_from_str!(Setentry);
